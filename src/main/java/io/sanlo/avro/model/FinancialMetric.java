/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.sanlo.avro.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FinancialMetric extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7671292114702285098L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FinancialMetric\",\"namespace\":\"io.sanlo.avro.model\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"appName\",\"type\":\"string\"},{\"name\":\"companyId\",\"type\":\"int\"},{\"name\":\"revenues\",\"type\":\"double\"},{\"name\":\"marketingSpent\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FinancialMetric> ENCODER =
      new BinaryMessageEncoder<FinancialMetric>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FinancialMetric> DECODER =
      new BinaryMessageDecoder<FinancialMetric>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<FinancialMetric> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<FinancialMetric> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<FinancialMetric>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this FinancialMetric to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a FinancialMetric from a ByteBuffer. */
  public static FinancialMetric fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence appName;
  @Deprecated public int companyId;
  @Deprecated public double revenues;
  @Deprecated public double marketingSpent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FinancialMetric() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param appName The new value for appName
   * @param companyId The new value for companyId
   * @param revenues The new value for revenues
   * @param marketingSpent The new value for marketingSpent
   */
  public FinancialMetric(java.lang.CharSequence date, java.lang.CharSequence appName, java.lang.Integer companyId, java.lang.Double revenues, java.lang.Double marketingSpent) {
    this.date = date;
    this.appName = appName;
    this.companyId = companyId;
    this.revenues = revenues;
    this.marketingSpent = marketingSpent;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return appName;
    case 2: return companyId;
    case 3: return revenues;
    case 4: return marketingSpent;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: appName = (java.lang.CharSequence)value$; break;
    case 2: companyId = (java.lang.Integer)value$; break;
    case 3: revenues = (java.lang.Double)value$; break;
    case 4: marketingSpent = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'appName' field.
   * @return The value of the 'appName' field.
   */
  public java.lang.CharSequence getAppName() {
    return appName;
  }

  /**
   * Sets the value of the 'appName' field.
   * @param value the value to set.
   */
  public void setAppName(java.lang.CharSequence value) {
    this.appName = value;
  }

  /**
   * Gets the value of the 'companyId' field.
   * @return The value of the 'companyId' field.
   */
  public java.lang.Integer getCompanyId() {
    return companyId;
  }

  /**
   * Sets the value of the 'companyId' field.
   * @param value the value to set.
   */
  public void setCompanyId(java.lang.Integer value) {
    this.companyId = value;
  }

  /**
   * Gets the value of the 'revenues' field.
   * @return The value of the 'revenues' field.
   */
  public java.lang.Double getRevenues() {
    return revenues;
  }

  /**
   * Sets the value of the 'revenues' field.
   * @param value the value to set.
   */
  public void setRevenues(java.lang.Double value) {
    this.revenues = value;
  }

  /**
   * Gets the value of the 'marketingSpent' field.
   * @return The value of the 'marketingSpent' field.
   */
  public java.lang.Double getMarketingSpent() {
    return marketingSpent;
  }

  /**
   * Sets the value of the 'marketingSpent' field.
   * @param value the value to set.
   */
  public void setMarketingSpent(java.lang.Double value) {
    this.marketingSpent = value;
  }

  /**
   * Creates a new FinancialMetric RecordBuilder.
   * @return A new FinancialMetric RecordBuilder
   */
  public static io.sanlo.avro.model.FinancialMetric.Builder newBuilder() {
    return new io.sanlo.avro.model.FinancialMetric.Builder();
  }

  /**
   * Creates a new FinancialMetric RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FinancialMetric RecordBuilder
   */
  public static io.sanlo.avro.model.FinancialMetric.Builder newBuilder(io.sanlo.avro.model.FinancialMetric.Builder other) {
    return new io.sanlo.avro.model.FinancialMetric.Builder(other);
  }

  /**
   * Creates a new FinancialMetric RecordBuilder by copying an existing FinancialMetric instance.
   * @param other The existing instance to copy.
   * @return A new FinancialMetric RecordBuilder
   */
  public static io.sanlo.avro.model.FinancialMetric.Builder newBuilder(io.sanlo.avro.model.FinancialMetric other) {
    return new io.sanlo.avro.model.FinancialMetric.Builder(other);
  }

  /**
   * RecordBuilder for FinancialMetric instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FinancialMetric>
    implements org.apache.avro.data.RecordBuilder<FinancialMetric> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence appName;
    private int companyId;
    private double revenues;
    private double marketingSpent;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.sanlo.avro.model.FinancialMetric.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appName)) {
        this.appName = data().deepCopy(fields()[1].schema(), other.appName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.companyId)) {
        this.companyId = data().deepCopy(fields()[2].schema(), other.companyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.revenues)) {
        this.revenues = data().deepCopy(fields()[3].schema(), other.revenues);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marketingSpent)) {
        this.marketingSpent = data().deepCopy(fields()[4].schema(), other.marketingSpent);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FinancialMetric instance
     * @param other The existing instance to copy.
     */
    private Builder(io.sanlo.avro.model.FinancialMetric other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.appName)) {
        this.appName = data().deepCopy(fields()[1].schema(), other.appName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.companyId)) {
        this.companyId = data().deepCopy(fields()[2].schema(), other.companyId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.revenues)) {
        this.revenues = data().deepCopy(fields()[3].schema(), other.revenues);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marketingSpent)) {
        this.marketingSpent = data().deepCopy(fields()[4].schema(), other.marketingSpent);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'appName' field.
      * @return The value.
      */
    public java.lang.CharSequence getAppName() {
      return appName;
    }

    /**
      * Sets the value of the 'appName' field.
      * @param value The value of 'appName'.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder setAppName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.appName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'appName' field has been set.
      * @return True if the 'appName' field has been set, false otherwise.
      */
    public boolean hasAppName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'appName' field.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder clearAppName() {
      appName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'companyId' field.
      * @return The value.
      */
    public java.lang.Integer getCompanyId() {
      return companyId;
    }

    /**
      * Sets the value of the 'companyId' field.
      * @param value The value of 'companyId'.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder setCompanyId(int value) {
      validate(fields()[2], value);
      this.companyId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'companyId' field has been set.
      * @return True if the 'companyId' field has been set, false otherwise.
      */
    public boolean hasCompanyId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'companyId' field.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder clearCompanyId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'revenues' field.
      * @return The value.
      */
    public java.lang.Double getRevenues() {
      return revenues;
    }

    /**
      * Sets the value of the 'revenues' field.
      * @param value The value of 'revenues'.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder setRevenues(double value) {
      validate(fields()[3], value);
      this.revenues = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'revenues' field has been set.
      * @return True if the 'revenues' field has been set, false otherwise.
      */
    public boolean hasRevenues() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'revenues' field.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder clearRevenues() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketingSpent' field.
      * @return The value.
      */
    public java.lang.Double getMarketingSpent() {
      return marketingSpent;
    }

    /**
      * Sets the value of the 'marketingSpent' field.
      * @param value The value of 'marketingSpent'.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder setMarketingSpent(double value) {
      validate(fields()[4], value);
      this.marketingSpent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'marketingSpent' field has been set.
      * @return True if the 'marketingSpent' field has been set, false otherwise.
      */
    public boolean hasMarketingSpent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'marketingSpent' field.
      * @return This builder.
      */
    public io.sanlo.avro.model.FinancialMetric.Builder clearMarketingSpent() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FinancialMetric build() {
      try {
        FinancialMetric record = new FinancialMetric();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.appName = fieldSetFlags()[1] ? this.appName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.companyId = fieldSetFlags()[2] ? this.companyId : (java.lang.Integer) defaultValue(fields()[2]);
        record.revenues = fieldSetFlags()[3] ? this.revenues : (java.lang.Double) defaultValue(fields()[3]);
        record.marketingSpent = fieldSetFlags()[4] ? this.marketingSpent : (java.lang.Double) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FinancialMetric>
    WRITER$ = (org.apache.avro.io.DatumWriter<FinancialMetric>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FinancialMetric>
    READER$ = (org.apache.avro.io.DatumReader<FinancialMetric>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
